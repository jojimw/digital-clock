{"version":3,"sources":["components/slider/Slider.jsx","utils.js","components/digital-clock/DigitalClock.jsx","App.js","reportWebVitals.js","index.js"],"names":["INIT_Y_POS","Slider","currentValue","sliderKey","length","useEffect","value","prevPos","nextPos","sliderElement","document","getElementById","keyframes","transform","animate","iterations","duration","fill","easing","animateSlider","getNextPositionFromValue","indexes","Array","className","id","map","_","index","hoursDateKey","minutesDateKey","secondsDateKey","DigitalClock","useState","Date","currentTime","setCurrentTime","getTime","counter","setInterval","clearInterval","dateData","time","seconds","getSeconds","minutes","getMinutes","hoursMoment","moment","format","Math","floor","getParsedData","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gTAWMA,EAAa,IA2CJC,EA5BA,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,UAA6B,IAAlBC,cAAkB,MAAT,GAAS,EAE3DC,qBAAU,WARqB,IAACC,GCnBZ,SAACC,EAASC,EAASL,GACvC,IAAMM,EAAgBC,SAASC,eAAT,yBAA0CR,IAQ1DS,EAAY,CACd,CAAEC,UAAU,cAAD,OAAgBN,EAAhB,QACX,CAAEM,UAAU,cAAD,OAAgBL,EAAhB,SAEfC,GAAiBA,EAAcK,QAAQF,EAVvB,CACZG,WAAY,EACZC,SAAU,IACVC,KAAM,WACNC,OAAQ,oCDqBVC,EAT8Bb,EASSJ,EARpCI,EAEEN,EAXe,KAWAM,EAAQ,IAFXN,KAPY,SAACM,GAChC,OAAKA,EAEEN,EALe,IAKAM,EAFHN,EAcqCoB,CAAyBlB,GAAeC,KAC7F,CAACD,EAAcC,IAGlB,IAAMkB,EAAO,YAAO,IAAIC,MAAMlB,IAE9B,OACE,mCACA,qBAAKmB,UAAU,gBAAf,SACE,qBAAKC,GAAE,yBAAoBrB,GAA3B,SACGkB,EAAQI,KAAI,SAACC,EAAGC,GAAJ,OACX,qBAAKJ,UAAU,gBAAf,SACE,8BAAMI,KADR,iBAA8CA,cEjClDC,G,MAAe,CACnB,cACA,gBAGIC,EAAiB,CACrB,gBACA,iBAGIC,EAAiB,CACrB,gBACA,iBAkDaC,EAhCM,WACnB,MAAsCC,mBAAS,IAAIC,MAAnD,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAU,WACdD,EAAe,IAAIF,OAGrB5B,qBAAU,WACR,IAAMgC,EAAUC,YAAYF,EAAS,KAErC,OAAO,WACLG,cAAcF,MAEf,IAEH,IAAMG,EA9Bc,SAACC,GAAU,IAAD,EACxBC,EAAUD,EAAKE,aACfC,EAAUH,EAAKI,aACfC,EAAcC,IAAON,GAAMO,OAAO,KAExC,OAAO,EAAP,iBACGlB,EAAe,GAAKmB,KAAKC,MAAMR,EAAU,KAD5C,cAEGZ,EAAe,GAAKY,EAAU,IAFjC,cAGGb,EAAe,GAAKoB,KAAKC,MAAMN,EAAU,KAH5C,cAIGf,EAAe,GAAKe,EAAU,IAJjC,cAKGhB,EAAa,GAAKqB,KAAKC,MAAMJ,EAAc,KAL9C,cAMGlB,EAAa,GAAKkB,EAAc,IANnC,EAyBiBK,CAAcjB,GAE/B,OACE,sBAAKX,UAAU,UAAf,UACGK,EAAaH,KAAI,SAAC2B,GAAD,OAAS,cAAC,EAAD,CAAkBjD,UAAWiD,EAAKlD,aAAcsC,EAASY,GAAMhD,OAAQgD,IAAQxB,EAAa,GAAK,EAAI,IAAxFwB,MAExC,mBAAG7B,UAAU,UAAb,eAECM,EAAeJ,KAAI,SAAC2B,GAAD,OAAS,cAAC,EAAD,CAAkBjD,UAAWiD,EAAKlD,aAAcsC,EAASY,IAA5CA,MAE1C,mBAAG7B,UAAU,UAAb,eAECO,EAAeL,KAAI,SAAC2B,GAAD,OAAS,cAAC,EAAD,CAAkBjD,UAAWiD,EAAKlD,aAAcsC,EAASY,IAA5CA,UClDjCC,G,MARH,WACV,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,QCGS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvD,SAASC,eAAe,SAM1B2C,M","file":"static/js/main.3d30b5f4.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.scss';\nimport { animateSlider } from '../../utils';\n\n// init - 210px\n// next item increment - 100px\n// per circle height - 100px\n// slider height - 500px\n\nconst INIT_Y_POS = 210;\nconst Y_POS_INCREMENT = 100;\n\nconst getNextPositionFromValue = (value) => {\n  if (!value) return INIT_Y_POS;\n\n  return INIT_Y_POS - ((value) * Y_POS_INCREMENT);\n}\n\nconst getPrevPositionFromValue = (value) => {\n  if (!value) return INIT_Y_POS - (10 * Y_POS_INCREMENT);\n\n  return INIT_Y_POS - ((value - 1) * Y_POS_INCREMENT);\n}\n\nconst Slider = ({ currentValue, sliderKey, length = 10 }) => {\n  // useEffect to animate the slider to required position based on currentValue prop\n  useEffect(() => {\n    animateSlider(getPrevPositionFromValue(currentValue), getNextPositionFromValue(currentValue), sliderKey);\n  }, [currentValue, sliderKey]);\n\n  // Stores a dummy array of length from props (default is 10)\n  const indexes = [...new Array(length)];\n\n  return (\n    <>\n    <div className=\"slider-column\">\n      <div id={`slider-control-${sliderKey}`}>\n        {indexes.map((_, index) => (\n          <div className=\"slider-circle\" key={`circle_${index}`}>\n            <div>{index}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  </>\n  )\n};\n\nSlider.propTypes = {\n  currentValue: PropTypes.number\n};\n\nexport default Slider;","\nconst animateSlider = (prevPos, nextPos, sliderKey) => {\n  const sliderElement = document.getElementById(`slider-control-${sliderKey}`);\n\n  const options = {\n      iterations: 1,\n      duration: 500,\n      fill: 'forwards',\n      easing: 'cubic-bezier(.19, 1, .22, 1.04)',\n  };\n  const keyframes = [\n      { transform: `translateY(${prevPos}px)` },\n      { transform: `translateY(${nextPos}px)` }\n  ];\n  sliderElement && sliderElement.animate(keyframes, options);\n};\n\nexport { animateSlider };","import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\n\nimport Slider from '../slider/Slider';\n\nimport './styles.scss';\n\nconst hoursDateKey = [\n  'hoursPrefix',\n  'hoursSuffix'\n];\n\nconst minutesDateKey = [\n  'minutesPrefix',\n  'minutesSuffix'\n];\n\nconst secondsDateKey = [\n  'secondsPrefix',\n  'secondsSuffix'\n];\n\nconst getParsedData = (time) => {\n  const seconds = time.getSeconds();\n  const minutes = time.getMinutes();\n  const hoursMoment = moment(time).format('h');\n\n  return {\n    [secondsDateKey[0]]: Math.floor(seconds / 10),\n    [secondsDateKey[1]]: seconds % 10,\n    [minutesDateKey[0]]: Math.floor(minutes / 10),\n    [minutesDateKey[1]]: minutes % 10,\n    [hoursDateKey[0]]: Math.floor(hoursMoment / 10),\n    [hoursDateKey[1]]: hoursMoment % 10\n  }\n}\n\nconst DigitalClock = () => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  const getTime = () => {\n    setCurrentTime(new Date());\n  };\n  \n  useEffect(() => {\n    const counter = setInterval(getTime, 1000);\n    \n    return () => {\n      clearInterval(counter);\n    }\n  }, []);\n\n  const dateData = getParsedData(currentTime)\n\n  return (\n    <div className=\"wrapper\">\n      {hoursDateKey.map((key) => <Slider key={key} sliderKey={key} currentValue={dateData[key]} length={key === hoursDateKey[0] ? 2 : 10} />)}\n      \n      <p className=\"divider\">:</p>\n      \n      {minutesDateKey.map((key) => <Slider key={key} sliderKey={key} currentValue={dateData[key]} />)}\n      \n      <p className=\"divider\">:</p>\n\n      {secondsDateKey.map((key) => <Slider key={key} sliderKey={key} currentValue={dateData[key]} />)}\n    </div>\n  )\n}\n\nexport default DigitalClock;","import React from 'react';\n\nimport DigitalClock from './components/digital-clock/DigitalClock';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <DigitalClock />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}