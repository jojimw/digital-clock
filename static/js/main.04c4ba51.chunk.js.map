{"version":3,"sources":["constants/screen.js","utils/slider.js","constants/slider.js","components/slider/Slider.jsx","hooks/useWindowResize.js","utils/screen.js","constants/time.js","components/digital-clock/DigitalClock.jsx","utils/time.js","App.js","reportWebVitals.js","index.js"],"names":["screenSize","getPositionUpdateParams","windowSize","initYPos","yPosIncrement","getNextPositionFromValue","value","getPrevPositionFromValue","Slider","currentValue","sliderKey","length","useEffect","prevPos","nextPos","sliderElement","document","getElementById","keyframes","transform","animate","iterations","duration","fill","easing","animateSlider","indexes","Array","sliderCircleStyle","width","height","margin","getSliderCircleStyle","sliderColumnStyle","getSliderColumnStyle","className","style","id","map","_","index","useWindowResize","useState","setWindowSize","updateWindowSize","target","newScreen","innerWidth","getWindowSizeFromWidth","window","onWindowSizeChange","throttle","event","currentTarget","addEventListener","removeEventListener","hoursDateKey","minutesDateKey","secondsDateKey","DigitalClock","Date","currentTime","setCurrentTime","counter","setInterval","clearInterval","dateValues","time","seconds","getSeconds","minutes","getMinutes","hoursMoment","moment","format","Math","floor","getParsedSliderDateValues","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.04c4ba51.chunk.js","sourcesContent":["export const screenSize = {\n  tab: 'tab',\n  phone: 'phone',\n  laptop: 'laptop'\n};\n","import { screenSize } from \"../constants/screen\";\n\nimport {\n  CIRCLE_HEIGHT_PHONE,\n  CIRCLE_HEIGHT_TAB,\n  CIRCLE_MARGIN_BOTTOM_PHONE,\n  CIRCLE_MARGIN_BOTTOM_TAB,\n  CIRCLE_MARGIN_HORIZONTAL_TAB,\n  CIRCLE_MARGIN_HORIZONTAL_PHONE,\n  INIT_Y_POS, INIT_Y_POS_PHONE,\n  INIT_Y_POS_TAB,\n  SLIDER_HEIGHT_PHONE,\n  SLIDER_HEIGHT_TAB,\n  Y_POS_INCREMENT,\n  Y_POS_INCREMENT_PHONE,\n  Y_POS_INCREMENT_TAB\n} from \"../constants/slider\";\n\nexport const animateSlider = ({ prevPos, nextPos, sliderKey }) => {\n  const sliderElement = document.getElementById(`slider-control-${sliderKey}`);\n\n  const options = {\n      iterations: 1,\n      duration: 500,\n      fill: 'forwards',\n      easing: 'cubic-bezier(.19, 1, .22, 1.04)',\n  };\n  const keyframes = [\n      { transform: `translateY(${prevPos}px)` },\n      { transform: `translateY(${nextPos}px)` }\n  ];\n  sliderElement && sliderElement.animate(keyframes, options);\n};\n\nconst getPositionUpdateParams = (windowSize) => (\n  {\n    [screenSize.laptop]: {\n      initYPos: INIT_Y_POS,\n      yPosIncrement: Y_POS_INCREMENT\n    },\n    [screenSize.tab]: {\n      initYPos: INIT_Y_POS_TAB,\n      yPosIncrement: Y_POS_INCREMENT_TAB\n    },\n    [screenSize.phone]: {\n      initYPos: INIT_Y_POS_PHONE,\n      yPosIncrement: Y_POS_INCREMENT_PHONE\n    },\n  }[windowSize]\n);\n\nexport const getNextPositionFromValue = ({ value, windowSize }) => {\n  const { initYPos, yPosIncrement } = getPositionUpdateParams(windowSize);\n\n  if (!value) return initYPos;\n\n  return initYPos - ((value) * yPosIncrement);\n};\n\nexport const getPrevPositionFromValue = ({ value, windowSize }) => {\n  const { initYPos, yPosIncrement } = getPositionUpdateParams(windowSize);\n\n  if (!value) return initYPos - (10 * yPosIncrement);\n\n  return initYPos - ((value - 1) * yPosIncrement);\n};\n\nexport const getSliderCircleStyle = (windowSize) => {\n  switch (windowSize) {\n    case screenSize.laptop:\n      return null; // applies the default style in styles.scss file\n      \n    case screenSize.tab:\n      return {\n        width: `${CIRCLE_HEIGHT_TAB}px`,\n        height: `${CIRCLE_HEIGHT_TAB}px`,\n        margin: `0px ${CIRCLE_MARGIN_HORIZONTAL_TAB}px ${CIRCLE_MARGIN_BOTTOM_TAB}px`\n      };\n\n    case screenSize.phone:\n      return {\n        width: `${CIRCLE_HEIGHT_PHONE}px`,\n        height: `${CIRCLE_HEIGHT_PHONE}px`,\n        margin: `0px ${CIRCLE_MARGIN_HORIZONTAL_PHONE}px ${CIRCLE_MARGIN_BOTTOM_PHONE}px`\n      };\n\n    default:\n      return null;\n  }\n};\n\nexport const getSliderColumnStyle = (windowSize) => {\n  switch (windowSize) {\n    case screenSize.laptop:\n      return null; // applies the default style in styles.scss file\n      \n    case screenSize.tab:\n      return { height: `${SLIDER_HEIGHT_TAB}px` };\n\n    case screenSize.phone:\n      return { height: `${SLIDER_HEIGHT_PHONE}px` };\n\n    default:\n      return null;\n  }\n};","// Laptop\n// init - 210px = (height of 2 circles + margin bottom / 2)\n// next item increment - 100px\n// per circle height - 100px (80 height + 20 margin)\n// slider height - 500px\n\nexport const INIT_Y_POS = 210;\nexport const Y_POS_INCREMENT = 100;\n\n// Tab\n// init - 126px = (height of 2 circles + margin bottom / 2)\n// next item increment - 60px\n// per circle height - 60px (48 height + 12 margin)\n// slider height - 300px\n\nexport const INIT_Y_POS_TAB = 126;\nexport const Y_POS_INCREMENT_TAB = 60;\nexport const CIRCLE_HEIGHT_TAB = 48;\nexport const CIRCLE_MARGIN_BOTTOM_TAB = 12;\nexport const CIRCLE_MARGIN_HORIZONTAL_TAB = 6;\nexport const SLIDER_HEIGHT_TAB = 300;\n\n// Phone\n// init - 84px = (height of 2 circles + margin bottom / 2)\n// next item increment - 40px\n// per circle height - 40px (32 height + 8 margin)\n// slider height - 200px\n\nexport const INIT_Y_POS_PHONE = 84;\nexport const Y_POS_INCREMENT_PHONE = 40;\nexport const CIRCLE_HEIGHT_PHONE = 32;\nexport const CIRCLE_MARGIN_BOTTOM_PHONE = 8;\nexport const CIRCLE_MARGIN_HORIZONTAL_PHONE = 4;\nexport const SLIDER_HEIGHT_PHONE = 200;","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.scss';\n\nimport {\n  animateSlider,\n  getNextPositionFromValue,\n  getPrevPositionFromValue,\n  getSliderCircleStyle,\n  getSliderColumnStyle\n} from '../../utils/slider';\n\nconst Slider = ({ currentValue, sliderKey, length = 10, windowSize }) => {\n  // useEffect to animate the slider to required position based on currentValue prop\n  useEffect(() => {\n    animateSlider({\n      prevPos: getPrevPositionFromValue({ value: currentValue, windowSize }),\n      nextPos: getNextPositionFromValue({ value: currentValue, windowSize }),\n      sliderKey\n    });\n  }, [currentValue, sliderKey, windowSize]);\n\n  // Stores a dummy array of length from props (default is 10)\n  const indexes = [...new Array(length)];\n\n  const sliderCircleStyle = getSliderCircleStyle(windowSize);\n\n  const sliderColumnStyle = getSliderColumnStyle(windowSize);\n\n  return (\n    <>\n    <div className=\"slider-column\" style={sliderColumnStyle}>\n      <div id={`slider-control-${sliderKey}`}>\n        {indexes.map((_, index) => (\n          <div className=\"slider-circle\" key={`circle_${index}`} style={sliderCircleStyle} >\n            <div>{index}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  </>\n  )\n};\n\nSlider.propTypes = {\n  currentValue: PropTypes.number\n};\n\nexport default Slider;","import { useEffect, useState } from 'react';\nimport throttle from 'lodash/throttle';\n\nimport { screenSize } from '../constants/screen';\nimport { getWindowSizeFromWidth } from '../utils/screen';\n\nexport const useWindowResize = () => {\n  /**\n   * > 800 - screenSize.laptop\n   * <= 800 & > 500 - screenSize.tab\n   * <= 500 - screenSize.phone\n   */\n  const [windowSize, setWindowSize] = useState(screenSize.laptop);\n\n  useEffect(() => {\n    const updateWindowSize = (target) => {\n      const newScreen = getWindowSizeFromWidth(target);\n      setWindowSize(newScreen);\n    };\n\n    // called on initial page mount\n    updateWindowSize(window);\n\n    const onWindowSizeChange = throttle(\n      (event) => {\n        // called on window resize event\n        updateWindowSize(event.currentTarget);\n      }, 500\n    );\n\n    window.addEventListener('resize', onWindowSizeChange);\n\n    return () => window.removeEventListener('resize', onWindowSizeChange)\n  }, []);\n\n  return {\n    windowSize\n  };\n}\n","import { screenSize } from \"../constants/screen\";\n\nexport const getWindowSizeFromWidth = (target) => {\n  const width = target.innerWidth;\n  \n  if (width > 800) return screenSize.laptop;\n\n  if (width <= 800 && width > 500) return screenSize.tab;\n\n  return screenSize.phone\n};","export const hoursDateKey = [\n  'hoursPrefix',\n  'hoursSuffix'\n];\n\nexport const minutesDateKey = [\n  'minutesPrefix',\n  'minutesSuffix'\n];\n\nexport const secondsDateKey = [\n  'secondsPrefix',\n  'secondsSuffix'\n];","import React, { useEffect, useState } from 'react';\n\nimport './styles.scss';\n\nimport Slider from '../slider/Slider';\n\nimport { useWindowResize } from '../../hooks/useWindowResize';\nimport { hoursDateKey, minutesDateKey, secondsDateKey } from '../../constants/time';\nimport { getParsedSliderDateValues } from '../../utils/time';\n\nconst DigitalClock = () => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  const { windowSize } = useWindowResize();\n  \n  useEffect(() => {\n    const getTime = () => {\n      setCurrentTime(new Date());\n    };\n\n    const counter = setInterval(getTime, 1000);\n    \n    return () => {\n      clearInterval(counter);\n    }\n  }, []);\n\n  const dateValues = getParsedSliderDateValues(currentTime)\n\n  return (\n    <div className=\"wrapper\">\n      {hoursDateKey.map((key) => <Slider\n        key={key}\n        sliderKey={key}\n        currentValue={dateValues[key]}\n        length={key === hoursDateKey[0] ? 2 : 10}\n        windowSize={windowSize}\n      />)}\n      \n      <p className=\"divider\">:</p>\n      \n      {minutesDateKey.map((key) => <Slider\n        key={key}\n        sliderKey={key}\n        currentValue={dateValues[key]}\n        windowSize={windowSize}\n      />)}\n      \n      <p className=\"divider\">:</p>\n\n      {secondsDateKey.map((key) => <Slider\n        key={key}\n        sliderKey={key}\n        currentValue={dateValues[key]}\n        windowSize={windowSize}\n      />)}\n    </div>\n  )\n}\n\nexport default DigitalClock;","import moment from 'moment';\n\nimport { hoursDateKey, minutesDateKey, secondsDateKey } from '../constants/time';\n\nexport const getParsedSliderDateValues = (time) => {\n  const seconds = time.getSeconds();\n  const minutes = time.getMinutes();\n  const hoursMoment = moment(time).format('h');\n\n  return {\n    [secondsDateKey[0]]: Math.floor(seconds / 10),\n    [secondsDateKey[1]]: seconds % 10,\n    [minutesDateKey[0]]: Math.floor(minutes / 10),\n    [minutesDateKey[1]]: minutes % 10,\n    [hoursDateKey[0]]: Math.floor(hoursMoment / 10),\n    [hoursDateKey[1]]: hoursMoment % 10\n  }\n}","import React from 'react';\n\nimport DigitalClock from './components/digital-clock/DigitalClock';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <DigitalClock />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}